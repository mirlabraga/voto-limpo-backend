service:
  name: voto-limpo-authentication

frameworkVersion: '2'

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  secrets: ${ssm:/aws/reference/secretsmanager/voto-limpo/dev~true}

plugins:
  - serverless-webpack
  - serverless-pseudo-parameters

provider:
  name: aws
  runtime: nodejs12.x
  timeout: 19
  region: eu-west-2
  apiGateway:
    minimumCompressionSize: 1024
  environment:
    GOOGLE_CLIENT_ID: ${self:custom.secrets.GOOGLE_CLIENT_ID}
    GOOGLE_CLIENT_SECRET_KEY: ${self:custom.secrets.GOOGLE_CLIENT_SECRET_KEY}
    BASE_URL: ${self:custom.secrets.BASE_URL}
    STATE_TABLE_NAME: { Ref: statesTable }
    SUPPORTER_TABLE_NAME: { Ref: supportersTable }
    CLIENTS_CONFIGS: ${self:custom.secrets.CLIENTS_CONFIGS}

# Functions

functions:
  authorize:
    handler: src/functions/authorize.handler
    role: lambdaRole
    events:
      - http:
          path: authorize
          method: get

  callback:
    handler: src/functions/callback.handler
    role: lambdaRole
    events:
      - http:
          path: callback
          method: get
  token:
    handler: src/functions/token.handler
    role: lambdaRole
    events:
      - http:
          path: token
          method: post

  myEvents:
    handler: src/functions/myEvents.handler
    role: lambdaRole
    events:
      - http:
          path: myEvents
          method: get
resources:
  Resources:
    statesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: state-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    supportersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: supporters-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    lambdaRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: ${self:service.name}-${self:provider.stage}-lambda-role
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Action: sts:AssumeRole
              Effect: Allow
              Principal:
                Service: lambda.amazonaws.com
        Description: ''
        Policies:
          - PolicyName: ${self:service.name}-${self:provider.stage}-lambda-logs-policy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
              - Effect: Allow
                Action:
                - "xray:PutTraceSegments"
                - "xray:PutTelemetryRecords"
                - "logs:CreateLogGroup"
                - "logs:CreateLogStream"
                - "logs:PutLogEvents"
                Resource: "*"


          - PolicyName: ${self:service.name}-${self:provider.stage}-lambda-dynamodb-policy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
              - Action:
                - dynamodb:DeleteItem
                - dynamodb:GetItem
                - dynamodb:PutItem
                - dynamodb:Query
                - dynamodb:Scan
                - dynamodb:UpdateItem
                - dynamodb:BatchGetItem
                - dynamodb:BatchWriteItem
                Effect: Allow
                Resource:
                - "#{statesTable.Arn}"
                - "#{statesTable.Arn}/*"
                - "#{supportersTable.Arn}"
                - "#{supportersTable.Arn}/*"
